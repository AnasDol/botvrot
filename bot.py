import os
import re
import time
import asyncio
import json
from datetime import datetime
from telegram import Update, ChatPermissions
from telegram.ext import (
    Application,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters
)
from config import ANTISPAM_CONFIG, user_warnings, message_history
from dotenv import load_dotenv
from telegram.constants import ParseMode

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STATE_FILE = "bot_state.json"
TOKEN = os.getenv('TELEGRAM_TOKEN')
OWNER_ID = int(os.getenv('OWNER_ID'))
MAX_WARNINGS = ANTISPAM_CONFIG["MAX_WARNINGS"]
BLACKLIST = ANTISPAM_CONFIG["BLACKLIST_WORDS"]


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
def save_state():
    state = {
        "user_warnings": user_warnings,
        "antispam_config": ANTISPAM_CONFIG,
        "banned_users": ANTISPAM_CONFIG.get('banned_users', {})
    }
    with open(STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(state, f, ensure_ascii=False, indent=2)


def load_state():
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            state = json.load(f)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_warnings.update(state.get("user_warnings", {}))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
        ANTISPAM_CONFIG.update(state.get("antispam_config", {}))

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if 'banned_users' not in ANTISPAM_CONFIG:
            ANTISPAM_CONFIG['banned_users'] = {}
        ANTISPAM_CONFIG['banned_users'].update(state.get("banned_users", {}))

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        global BLACKLIST, MAX_WARNINGS
        BLACKLIST = ANTISPAM_CONFIG["BLACKLIST_WORDS"]
        MAX_WARNINGS = ANTISPAM_CONFIG["MAX_WARNINGS"]

    except FileNotFoundError:
        print("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
def is_spam(text: str) -> bool:
    if not text:
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    if any(re.search(rf'\b{re.escape(word)}\b', text, re.IGNORECASE) for word in BLACKLIST):
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (@username –±–æ–ª–µ–µ 5 —Ä–∞–∑)
    if len(re.findall(r'@\w+', text)) > 5:
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    if len(re.findall(r'[!*#$%^&]{3,}', text)) > 3:
        return True

    return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
def is_repeated(chat_id: int, user_id: int, text: str) -> bool:
    if not text:
        return False

    now = time.time()
    key = f"{chat_id}_{user_id}"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if key not in message_history:
        message_history[key] = []

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    message_history[key] = [
        (msg, t) for msg, t in message_history[key]
        if now - t <= ANTISPAM_CONFIG["REPEAT_TIME_WINDOW"]
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    repeat_count = sum(1 for msg, _ in message_history[key] if msg == text)
    message_history[key].append((text, now))

    return repeat_count >= ANTISPAM_CONFIG["MAX_REPEATED_MESSAGES"]


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def delete_message_after_delay(context, chat_id, message_id, delay=30):
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if update.effective_user.id in ANTISPAM_CONFIG["ADMIN_IDS"]:
        return

    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message
    message_text = message.text or ""
    mention = "[" + user.name + "](tg://user?id=" + str(user.id) + ")"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    spam_detected = is_spam(message_text) or is_repeated(chat.id, user.id, message_text)

    if not spam_detected:
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    user_key = f"{chat.id}_{user.id}"
    if user_key not in user_warnings:
        user_warnings[user_key] = 0

    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    user_warnings[user_key] += 1
    warnings_count = user_warnings[user_key]

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è
    if ANTISPAM_CONFIG["DELETE_SPAM"]:
        try:
            await context.bot.delete_message(chat.id, message.id)
            await context.bot.sendMessage(
                chat_id=update.message.chat_id,
                parse_mode="Markdown",
                text=f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ {mention}! "
                     f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç–æ–º. –í—ã–Ω–µ—Å–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}. "
                     f"{'–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ!' if warnings_count == MAX_WARNINGS else ''}"
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    if warnings_count > MAX_WARNINGS:
        # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.ban_chat_member(
                chat.id,
                user.id,
                until_date=time.time() + ANTISPAM_CONFIG["BAN_DURATION"]
            )
            await update.effective_chat.send_message(
                text=f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {('@' + user.username) if user.username is not None else user.full_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º!"
            )
            # –°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            del user_warnings[user_key]
            save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            if 'banned_users' not in ANTISPAM_CONFIG:
                ANTISPAM_CONFIG['banned_users'] = {}
            ANTISPAM_CONFIG['banned_users'][user_key] = time.time() + ANTISPAM_CONFIG["BAN_DURATION"]
            save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return

    try:
        new_admin_id = int(context.args[0])
        if new_admin_id not in ANTISPAM_CONFIG["ADMIN_IDS"]:
            ANTISPAM_CONFIG["ADMIN_IDS"].append(new_admin_id)
            save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id>")


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ANTISPAM_CONFIG["ADMIN_IDS"]:
        return

    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:\n"
    for user_key, count in user_warnings.items():
        chat_id, user_id = user_key.split('_')
        stats_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–∞—Ç–µ {chat_id}: {count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"

    await update.message.reply_text(stats_text or "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ANTISPAM_CONFIG["ADMIN_IDS"]:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return

    try:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
            return

        user_id = int(context.args[0])
        chat_id = update.effective_chat.id

        # –°–Ω–∏–º–∞–µ–º –±–∞–Ω
        await context.bot.unban_chat_member(chat_id, user_id)

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        user_key = f"{chat_id}_{user_id}"
        if 'banned_users' in ANTISPAM_CONFIG and user_key in ANTISPAM_CONFIG['banned_users']:
            del ANTISPAM_CONFIG['banned_users'][user_key]
            save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if user_key in user_warnings:
            del user_warnings[user_key]
            save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def add_to_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ANTISPAM_CONFIG["ADMIN_IDS"]:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text(
            "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
        return

    target_message = update.message.reply_to_message
    text_to_add = target_message.text.lower() or target_message.caption.lower()

    if not text_to_add:
        await update.message.reply_text("‚ÑπÔ∏è –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
        return

    if text_to_add in BLACKLIST:
        await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        return

    BLACKLIST.append(text_to_add)
    ANTISPAM_CONFIG["BLACKLIST_WORDS"] = BLACKLIST
    save_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    await update.message.reply_text(
        f"‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n`{text_to_add}`",
        parse_mode=ParseMode.MARKDOWN
    )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    load_state()

    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS,
        handle_message
    ))
    app.add_handler(CommandHandler("add_admin", add_admin))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("unban", unban_user))
    app.add_handler(CommandHandler("blacklist", add_to_blacklist))

    print("–ê–Ω—Ç–∏—Å–ø–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()